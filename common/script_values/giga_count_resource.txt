
# "improved" version which can count much higher
# uses nested values and inlines to drastically reduce check count from the naive implementation for larger ranges
# but it increases load time by generating more triggers... the big version is a significant extra load time
giga_count_resource = {
    base = 0
    # the full 10k - this REALLY extends load times by generating a SHITLOAD of triggers
    #inline_script = { script = script_values/giga_count_resource_thousands m1 = 0 m2 = 1 resource = $resource$ }
    #inline_script = { script = script_values/giga_count_resource_thousands m1 = 1 m2 = 2 resource = $resource$ }
    #inline_script = { script = script_values/giga_count_resource_thousands m1 = 2 m2 = 3 resource = $resource$ }
    #inline_script = { script = script_values/giga_count_resource_thousands m1 = 3 m2 = 4 resource = $resource$ }
    #inline_script = { script = script_values/giga_count_resource_thousands m1 = 4 m2 = 5 resource = $resource$ }
    #inline_script = { script = script_values/giga_count_resource_thousands m1 = 5 m2 = 6 resource = $resource$ }
    #inline_script = { script = script_values/giga_count_resource_thousands m1 = 6 m2 = 7 resource = $resource$ }
    #inline_script = { script = script_values/giga_count_resource_thousands m1 = 7 m2 = 8 resource = $resource$ }
    #inline_script = { script = script_values/giga_count_resource_thousands m1 = 8 m2 = 9 resource = $resource$ }
    #inline_script = { script = script_values/giga_count_resource_thousands m1 = 9 m2 = 10 resource = $resource$ }
    #modifier = {
    #    has_resource = {
    #        type = $resource$
    #        amount >= 10000
    #    }
    #    weight = 10000
    #}

    # just 0-100
    weight = value:giga_count_resource_internal_tens|resource|$resource$|c1|0|m1|0|
    modifier = {
        has_resource = {
            type = $resource$
            amount >= 100
        }
        weight = 100
    }

    [[space]
        divide = value:giga_count_resource_space_output_modifier|resource|$resource$|research|$research|no$|
    ]

    [[mult]
        multiply = $mult$
    ]
}

#giga_count_resource_internal_hundreds = {
#    base = 0
#    inline_script = { script = script_values/giga_count_resource_hundreds c1 = 0 c2 = 1 m1 = $m1$ resource = $resource$ }
#    inline_script = { script = script_values/giga_count_resource_hundreds c1 = 1 c2 = 2 m1 = $m1$ resource = $resource$ }
#    inline_script = { script = script_values/giga_count_resource_hundreds c1 = 2 c2 = 3 m1 = $m1$ resource = $resource$ }
#    inline_script = { script = script_values/giga_count_resource_hundreds c1 = 3 c2 = 4 m1 = $m1$ resource = $resource$ }
#    inline_script = { script = script_values/giga_count_resource_hundreds c1 = 4 c2 = 5 m1 = $m1$ resource = $resource$ }
#    inline_script = { script = script_values/giga_count_resource_hundreds c1 = 5 c2 = 6 m1 = $m1$ resource = $resource$ }
#    inline_script = { script = script_values/giga_count_resource_hundreds c1 = 6 c2 = 7 m1 = $m1$ resource = $resource$ }
#    inline_script = { script = script_values/giga_count_resource_hundreds c1 = 7 c2 = 8 m1 = $m1$ resource = $resource$ }
#    inline_script = { script = script_values/giga_count_resource_hundreds c1 = 8 c2 = 9 m1 = $m1$ resource = $resource$ }
#    inline_script = { script = script_values/giga_count_resource_hundreds c1 = 9 c2 = 10 m1 = $m1$ resource = $resource$ }
#}

giga_count_resource_internal_tens = {
    base = 0
    inline_script = { script = script_values/giga_count_resource_tens x1 = 0 x2 = 1 c1 = $c1$ m1 = $m1$ resource = $resource$ }
    inline_script = { script = script_values/giga_count_resource_tens x1 = 1 x2 = 2 c1 = $c1$ m1 = $m1$ resource = $resource$ }
    inline_script = { script = script_values/giga_count_resource_tens x1 = 2 x2 = 3 c1 = $c1$ m1 = $m1$ resource = $resource$ }
    inline_script = { script = script_values/giga_count_resource_tens x1 = 3 x2 = 4 c1 = $c1$ m1 = $m1$ resource = $resource$ }
    inline_script = { script = script_values/giga_count_resource_tens x1 = 4 x2 = 5 c1 = $c1$ m1 = $m1$ resource = $resource$ }
    inline_script = { script = script_values/giga_count_resource_tens x1 = 5 x2 = 6 c1 = $c1$ m1 = $m1$ resource = $resource$ }
    inline_script = { script = script_values/giga_count_resource_tens x1 = 6 x2 = 7 c1 = $c1$ m1 = $m1$ resource = $resource$ }
    inline_script = { script = script_values/giga_count_resource_tens x1 = 7 x2 = 8 c1 = $c1$ m1 = $m1$ resource = $resource$ }
    inline_script = { script = script_values/giga_count_resource_tens x1 = 8 x2 = 9 c1 = $c1$ m1 = $m1$ resource = $resource$ }
    inline_script = { script = script_values/giga_count_resource_tens x1 = 9 x2 = 10 c1 = $c1$ m1 = $m1$ resource = $resource$ }
}

giga_count_resource_internal_ones = {
    base = $m1$$c1$$x1$0

    modifier = {
        has_resource = {
            type = $resource$
            amount > $m1$$c1$$x1$0
        }
        add = 1
    }

    modifier = {
        has_resource = {
            type = $resource$
            amount > $m1$$c1$$x1$1
        }
        add = 1
    }

    modifier = {
        has_resource = {
            type = $resource$
            amount > $m1$$c1$$x1$2
        }
        add = 1
    }

    modifier = {
        has_resource = {
            type = $resource$
            amount > $m1$$c1$$x1$3
        }
        add = 1
    }

    modifier = {
        has_resource = {
            type = $resource$
            amount > $m1$$c1$$x1$4
        }
        add = 1
    }

    modifier = {
        has_resource = {
            type = $resource$
            amount > $m1$$c1$$x1$5
        }
        add = 1
    }

    modifier = {
        has_resource = {
            type = $resource$
            amount > $m1$$c1$$x1$6
        }
        add = 1
    }

    modifier = {
        has_resource = {
            type = $resource$
            amount > $m1$$c1$$x1$7
        }
        add = 1
    }

    modifier = {
        has_resource = {
            type = $resource$
            amount > $m1$$c1$$x1$8
        }
        add = 1
    }
}


# original version which just counts up in the naive way, up to 25
#giga_count_resource = {
#    # complex_trigger_modifier = {
#    # 	trigger = has_resource
#    # 	parameters = {
#    # 		type = $resource$
#    # 	}
#    # 	mode = weight
#    # }
#
#    # since the above doesn't work (yet)... lol
#    base = 0
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 0
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 1
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 2
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 3
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 4
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 5
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 6
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 7
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 8
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 9
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 10
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 11
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 12
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 13
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 14
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 15
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 16
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 17
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 18
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 19
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 20
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 21
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 22
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 23
#        }
#    }
#
#    modifier = {
#        add = 1
#        has_resource = {
#            type = $resource$
#            amount > 24
#        }
#    }
#
#    [[space]
#        divide = value:giga_count_resource_space_output_modifier|resource|$resource$|research|$research|no$|
#    ]
#
#    [[mult]
#        multiply = $mult$
#    ]
#}